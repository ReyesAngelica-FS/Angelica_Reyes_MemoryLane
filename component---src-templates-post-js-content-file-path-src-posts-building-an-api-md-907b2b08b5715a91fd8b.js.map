{"version":3,"file":"component---src-templates-post-js-content-file-path-src-posts-building-an-api-md-907b2b08b5715a91fd8b.js","mappings":"gNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,IAAK,CACpFM,IAAK,iCACLC,IAAK,gBACH,KAAMF,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,wIAAyII,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,YAAa,QAASG,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,aAAc,0EAA2E,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,6DAA8DI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,OAAQ,QAASG,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,QAAS,2JACpmB,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCZO,MAWDc,EAAeC,IAAY,IAAX,KAACC,GAAKD,EAC1B,MAAM,YAACE,EAAW,KAAEC,GAAQF,EAAKG,IACjC,OAAOV,EAAAA,cAAoBW,EAAAA,EAAQ,KAAMX,EAAAA,cAAoB,UAAW,KAAMA,EAAAA,cAAoB,KAAM,KAAMQ,EAAYI,OAAQZ,EAAAA,cAAoB,IAAK,KAAMQ,EAAYK,MAAOb,EAAAA,cAAoBc,EAAAA,GAAa,KAAMd,EAAAA,cAAoB,MAAO,KAAMS,OAG/O,SAASM,EAAiBxB,GACvC,OAAOS,EAAAA,cAAoBK,EAAcd,EAAOS,EAAAA,cAAoBgB,EAAqBzB,GAC3F,C,+CCAA,IAlBee,IAAmB,IAAlB,SAAEW,GAAUX,EACxB,OACIN,EAAAA,cAAA,OAAKkB,UAAU,UACflB,EAAAA,cAAA,cACIA,EAAAA,cAAA,UACAA,EAAAA,cAACmB,EAAAA,GAAI,CAACC,GAAG,KAAI,oBAIjBpB,EAAAA,cAAA,YAAOiB,GAEPjB,EAAAA,cAAA,cACIA,EAAAA,cAAA,SAAG,MAAG,IAAIqB,MAAOC,cAAc,qB,8FCgBpC,MAAMC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBzB,GAC/B,MAAM0B,EAAoB,aAAiBF,GAG3C,OAAO,UAAc,IAEO,mBAAfxB,EACFA,EAAW0B,GAGb,IAAIA,KAAsB1B,GAChC,CAAC0B,EAAmB1B,GACzB,CAGA,MAAM2B,EAAc,CAAC,EAQd,SAASZ,GAAY,WAACf,EAAU,SAAEkB,EAAQ,qBAAEU,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAf5B,EACHA,EAAW,CAAC,GACZA,GAAc2B,EAEJF,EAAiBzB,GAG5B,gBACLwB,EAAWM,SACX,CAACC,MAAOF,GACRX,EAEJ,C","sources":["webpack://angelica-reyes-memorylane/./src/posts/building-an-api.md","webpack://angelica-reyes-memorylane/./src/templates/post.js","webpack://angelica-reyes-memorylane/./src/components/Layout.js","webpack://angelica-reyes-memorylane/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.img, {\n    src: \"/static/images/api-diagram.jpg\",\n    alt: \"API Diagram\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Building an API was one of the most rewarding parts of my developer journey so far. Using Node.js and Express, I created routes like \", React.createElement(_components.code, null, \"/recipes\"), \" and \", React.createElement(_components.code, null, \"/contacts\"), \", connected to a MongoDB database, and tested everything with Postman.\"), \"\\n\", React.createElement(_components.p, null, \"If you're starting out, I recommend beginning with simple \", React.createElement(_components.code, null, \"GET\"), \" and \", React.createElement(_components.code, null, \"POST\"), \" routes and gradually adding database integration. Once you understand the basics, deploying to a platform like Render or Railway is a great next step!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/angelicareyes/Desktop/Deployment of Web Applications/Angelica_Reyes_MemoryLane/src/posts/building-an-api.md\";\nimport * as React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport {MDXProvider} from \"@mdx-js/react\";\nexport const query = graphql`\n    query ($id: String!) {\n        mdx(id: { eq: $id }) {\n            frontmatter {\n                title\n                date(formatString: \"MMMM D, YYYY\")\n            }\n            body\n        }\n    }\n`;\nconst PostTemplate = ({data}) => {\n  const {frontmatter, body} = data.mdx;\n  return React.createElement(Layout, null, React.createElement(\"article\", null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"p\", null, frontmatter.date), React.createElement(MDXProvider, null, React.createElement(\"div\", null, body))));\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport \"./styles.css\" \n\n\nconst Layout = ({ children }) => {\n    return (\n        <div className=\"layout\">\n        <header>\n            <h1>\n            <Link to=\"/\">üìù Memory Lane</Link>\n            </h1>\n        </header>\n\n        <main>{children}</main>\n\n        <footer>\n            <p>¬© {new Date().getFullYear()} Angelica Reyes</p>\n        </footer>\n        </div>\n    )\n}\n\nexport default Layout\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it‚Äôs no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it‚Äôs no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","img","p","code","_provideComponents","components","React","src","alt","wrapper","MDXLayout","PostTemplate","_ref","data","frontmatter","body","mdx","Layout","title","date","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","children","className","Link","to","Date","getFullYear","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}